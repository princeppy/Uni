1.Add - O(n)
2.Remove Worst case - O(n) 
3.Remove Best case - O(n)
4.Remove average case - O(n)
--------------------------------------------
The remove operation is always O(n) because even if you get the first element you should rearrange the elements which is O(n).
If it is the last element you should scan the whole array and this is O(n) and then remove it and rearrange O(n) again. And this is O(n) - linear :)
If it is in the middle again finding the element is O(n/2) which is O(n) and then rearrange O(n). So again we have O(n).
--------------------------------------------
5.Remove first - O(n)
6.Remove last - O(n)
7.Length - O(n)
8.this[index] - O(1)
9.First - O(1)
10.Last - O(1)


public class StupidList<T>
{
    private T[] arr = new T[0];

    public int Length
    {
        get
        {
            return this.arr.Length;
        }
    }

    public T this[int index]
    {
        get
        {
            return this.arr[index];
        }
    }

    public T First
    {
        get
        {
            return this.arr[0];
        }
    }

    public T Last
    {
        get
        {
            return this.arr[this.arr.Length - 1];
        }
    }

    public void Add(T item)
    {
        var newArr = new T[this.arr.Length + 1];
        Array.Copy(this.arr, newArr, this.arr.Length);
        newArr[newArr.Length - 1] = item;
        this.arr = newArr;
    }

    public T Remove(int index)
    {
        T result = this.arr[index];
        var newArr = new T[this.arr.Length - 1];
        Array.Copy(this.arr, newArr, index);
        Array.Copy(this.arr, index + 1, newArr, index, this.arr.Length - index - 1);
        this.arr = newArr;
        return result;
    }

    public T RemoveFirst()
    {
        return this.Remove(0);
    }

    public T RemoveLast()
    {
        return this.Remove(this.Length - 1);
    }
}




